import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { Plus, Trash2, Save, Clock, DollarSign, Copy, Check, ExternalLink } from 'lucide-react'
import { SealQuizFeatures } from '../components/SealQuizFeatures'
import { QuizImageUpload } from '../components/QuizImageUpload'
import { sealService, SealConfig } from '../lib/sealService'
import { walrusDatabaseService } from '../lib/walrusDatabaseService'
import { quizContractService, QuizQuestion, QuizConfig } from '../lib/quizContractService'
import { useCurrentAccount } from '@mysten/dapp-kit'

interface Question {
  id: string
  text: string
  options: string[]
  correctAnswer: number
  timeLimit: number
}

export function CreateQuizPage() {
  const navigate = useNavigate()
  const currentAccount = useCurrentAccount()
  const [quizTitle, setQuizTitle] = useState('')
  const [quizDescription, setQuizDescription] = useState('')
  const [prizePool, setPrizePool] = useState(1000)
  const [quizDuration, setQuizDuration] = useState(30) // Quiz s√ºresi (dakika)
  const [quizImageUrl, setQuizImageUrl] = useState<string>('')
  const [quizImageId, setQuizImageId] = useState<string>('')
  const [quizId] = useState<string>(() => `quiz_${Date.now()}_${Math.random().toString(16).substr(2, 8)}`)
  const [createdQuizId, setCreatedQuizId] = useState<string | null>(null)
  const [copiedId, setCopiedId] = useState(false)

  const copyQuizId = async (id: string) => {
    try {
      await navigator.clipboard.writeText(id)
      setCopiedId(true)
      setTimeout(() => setCopiedId(false), 2000)
    } catch (error) {
      console.error('Failed to copy quiz ID:', error)
    }
  }
  
  // Seal Protocol features
  const [timeLockDuration, setTimeLockDuration] = useState(0)
  const [privacyEnabled, setPrivacyEnabled] = useState(true)
  const [multiSigEnabled, setMultiSigEnabled] = useState(false)
  const [whitelistAddresses, setWhitelistAddresses] = useState<string[]>([])
  const [questions, setQuestions] = useState<Question[]>([
    {
      id: '1',
      text: '',
      options: ['', '', '', ''],
      correctAnswer: 0,
      timeLimit: 30
    }
  ])

  const addQuestion = () => {
    const newQuestion: Question = {
      id: Date.now().toString(),
      text: '',
      options: ['', '', '', ''],
      correctAnswer: 0,
      timeLimit: 30
    }
    setQuestions([...questions, newQuestion])
  }

  const removeQuestion = (questionId: string) => {
    if (questions.length > 1) {
      setQuestions(questions.filter(q => q.id !== questionId))
    }
  }

  const updateQuestion = (questionId: string, field: keyof Question, value: any) => {
    setQuestions(questions.map(q => 
      q.id === questionId ? { ...q, [field]: value } : q
    ))
  }

  const updateOption = (questionId: string, optionIndex: number, value: string) => {
    setQuestions(questions.map(q => {
      if (q.id === questionId) {
        const newOptions = [...q.options]
        newOptions[optionIndex] = value
        return { ...q, options: newOptions }
      }
      return q
    }))
  }

  const handleImageUploaded = (imageUrl: string, imageId: string) => {
    setQuizImageUrl(imageUrl)
    setQuizImageId(imageId)
  }

  const handleImageRemoved = () => {
    setQuizImageUrl('')
    setQuizImageId('')
  }

  const handleSubmit = async () => {
    // Validate form
    if (!quizTitle.trim() || !quizDescription.trim()) {
      alert('Please fill in quiz title and description')
      return
    }

    if (questions.some(q => !q.text.trim() || q.options.some(opt => !opt.trim()))) {
      alert('Please fill in all questions and options')
      return
    }

    if (!currentAccount) {
      alert('Please connect your wallet to create a quiz')
      return
    }

    try {
      // Convert questions to contract format
      const contractQuestions: QuizQuestion[] = questions.map(q => ({
        question_text: q.text,
        options: q.options.filter(opt => opt.trim()),
        correct_answer: q.correctAnswer,
        time_limit: q.timeLimit
      }))

      // Create quiz config
      const quizConfig: QuizConfig = {
        duration_seconds: quizDuration * 60, // Convert minutes to seconds
        question_time_limit: 30, // Default question time limit
        max_participants: 100, // Default max participants
        prize_distribution: [100] // 100% to first place
      }

      // Create quiz on blockchain
      const signAndExecuteTransaction = async (tx: any) => {
        // This would be implemented with the actual wallet signing
        // For now, we'll simulate the transaction
        console.log('Simulating transaction:', tx)
        return { digest: 'simulated_tx_digest_' + Date.now() }
      }

      const txDigest = await quizContractService.createQuiz(
        quizTitle,
        quizDescription,
        contractQuestions,
        quizConfig,
        prizePool * 1000000000, // Convert SUI to MIST
        signAndExecuteTransaction
      )

      const newQuiz = {
        id: quizId,
        title: quizTitle,
        description: quizDescription,
        questions: questions.map(q => ({
          ...q,
          options: q.options.filter(opt => opt.trim())
        })),
        prizePool,
        duration: quizDuration, // Quiz s√ºresi (dakika)
        endTime: new Date(Date.now() + quizDuration * 60 * 1000).toISOString(), // Biti≈ü zamanƒ±
        createdAt: new Date().toISOString(),
        createdBy: currentAccount.address,
        participants: 0,
        timeLimit: questions.reduce((total, q) => total + q.timeLimit, 0),
        imageUrl: quizImageUrl,
        imageId: quizImageId,
        status: 'active' as const, // Quiz durumu
        winner: null as string | null, // Kazanan
        txDigest // Blockchain transaction digest
      }

      // Create Seal protection if any features are enabled
      if (timeLockDuration > 0 || privacyEnabled || multiSigEnabled || whitelistAddresses.length > 0) {
        console.log('Creating Seal protected quiz...')
        
        const sealConfig: SealConfig = {
          timeLockDuration,
          privacyEnabled,
          multiSigEnabled,
          whitelistAddresses
        }

        try {
          const sealId = await sealService.createSealProtectedQuiz({
            quizId: newQuiz.id,
            title: newQuiz.title,
            description: newQuiz.description,
            questions: newQuiz.questions,
            config: sealConfig
          })

          // Add Seal ID to quiz
          newQuiz.sealId = sealId
          console.log('‚úÖ Seal protection applied:', sealId)
        } catch (sealError) {
          console.warn('‚ö†Ô∏è Seal protection failed, continuing without protection:', sealError)
          // Continue without Seal protection - quiz is still valid
        }
      }

      // Store quiz in Walrus database (with localStorage fallback)
      const saved = await walrusDatabaseService.saveQuiz(newQuiz)
      if (saved) {
        console.log('‚úÖ Quiz saved to Walrus database')
      } else {
        console.log('‚ö†Ô∏è Quiz saved to localStorage (Walrus unavailable)')
      }
      
      // Update user profile stats (quiz created)
      if (currentAccount?.address) {
        try {
          const { ProfileService } = require('../lib/profileService')
          ProfileService.updateStatsAfterQuiz(currentAccount.address, 0, true) // isCreator = true
        } catch (error) {
          console.error('Error updating profile stats:', error)
        }
      }

      // Show quiz ID instead of navigating away
      setCreatedQuizId(quizId)
      
    } catch (error) {
      console.error('Error creating quiz:', error)
      alert('Failed to create quiz. Please try again.')
    }
  }

  // Show success screen if quiz was created
  if (createdQuizId) {
    return (
      <div className="max-w-2xl mx-auto space-y-8">
        <div className="text-center">
          <div className="w-20 h-20 bg-sui-light-blue/20 rounded-full flex items-center justify-center mx-auto mb-6">
            <Check className="w-10 h-10 text-sui-light-blue" />
          </div>
          <h1 className="text-4xl font-bold text-white mb-4 text-shadow">
            Quiz Created Successfully! üéâ
          </h1>
          <p className="text-white/70 text-lg mb-8">
            Your quiz is now live and protected by Seal Protocol
          </p>
        </div>

        {/* Quiz ID Display */}
        <div className="quiz-card">
          <h2 className="text-2xl font-bold text-white mb-6 text-center">Your Quiz ID</h2>
          
          <div className="bg-white/5 p-6 rounded-lg border border-white/10 mb-6">
            <div className="flex items-center justify-between">
              <div className="flex-1">
                <span className="text-white/60 text-sm block mb-2">Quiz ID:</span>
                <code className="text-sui-light-blue text-lg font-mono break-all">
                  {createdQuizId}
                </code>
              </div>
              <button
                onClick={() => copyQuizId(createdQuizId)}
                className="ml-4 p-2 hover:bg-white/10 rounded transition-colors"
                title="Copy Quiz ID"
              >
                {copiedId ? (
                  <Check className="w-6 h-6 text-green-400" />
                ) : (
                  <Copy className="w-6 h-6 text-white/60 hover:text-white" />
                )}
              </button>
            </div>
          </div>

          <div className="bg-sui-light-blue/10 border border-sui-light-blue/20 rounded-lg p-4 mb-6">
            <h3 className="text-sui-light-blue font-medium mb-2">Share Your Quiz</h3>
            <p className="text-white/60 text-sm mb-3">
              Share this Quiz ID with others so they can join your quiz using the "Quiz ID ile Katƒ±l" feature on the homepage.
            </p>
            <div className="flex items-center space-x-2 text-sui-light-blue text-sm">
              <ExternalLink className="w-4 h-4" />
              <span>Quiz ID: {createdQuizId}</span>
            </div>
          </div>

          <div className="flex flex-col sm:flex-row gap-4">
            <button
              onClick={() => navigate(`/quiz/${createdQuizId}`)}
              className="quiz-button flex-1 flex items-center justify-center space-x-2"
            >
              <ExternalLink className="w-4 h-4" />
              <span>View Quiz</span>
            </button>
            <button
              onClick={() => navigate('/')}
              className="quiz-button-secondary flex-1 flex items-center justify-center space-x-2"
            >
              <span>Back to Home</span>
            </button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="max-w-4xl mx-auto space-y-8">
      <div className="text-center">
                <h1 className="text-4xl font-bold text-white mb-4 text-shadow">
                  Create New Quiz - SuiKnow
                </h1>
        <p className="text-white/80 text-lg">
          Design your own interactive quiz and reward participants with SUI tokens!
        </p>
      </div>

      {/* Quiz Basic Info */}
      <div className="quiz-card">
        <h2 className="text-2xl font-semibold text-white mb-6">Quiz Information</h2>
        
        <div className="space-y-6">
          <div>
            <label className="block text-white font-medium mb-2">Quiz Title</label>
            <input
              type="text"
              value={quizTitle}
              onChange={(e) => setQuizTitle(e.target.value)}
              placeholder="Enter an engaging quiz title..."
              className="w-full p-4 bg-white/10 border border-white/20 rounded-xl text-white placeholder-white/50 focus:outline-none focus:border-sui-blue"
            />
          </div>

          <div>
            <label className="block text-white font-medium mb-2">Description</label>
            <textarea
              value={quizDescription}
              onChange={(e) => setQuizDescription(e.target.value)}
              placeholder="Describe what your quiz is about..."
              rows={3}
              className="w-full p-4 bg-white/10 border border-white/20 rounded-xl text-white placeholder-white/50 focus:outline-none focus:border-sui-blue resize-none"
            />
          </div>

          {/* Quiz Image Upload */}
          <QuizImageUpload
            onImageUploaded={handleImageUploaded}
            onImageRemoved={handleImageRemoved}
            currentImageUrl={quizImageUrl}
            quizId={quizId}
          />

          <div>
            <label className="block text-white font-medium mb-2">Prize Pool (SUI)</label>
            <div className="relative">
              <DollarSign className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-white/50" />
              <input
                type="number"
                value={prizePool}
                onChange={(e) => setPrizePool(Number(e.target.value))}
                min="0"
                step="1"
                className="w-full pl-12 pr-4 py-4 bg-white/10 border border-white/20 rounded-xl text-white placeholder-white/50 focus:outline-none focus:border-sui-blue"
              />
            </div>
          </div>

          <div>
            <label className="block text-white font-medium mb-2">Quiz Duration (Minutes)</label>
            <div className="relative">
              <Clock className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-white/50" />
              <select
                value={quizDuration}
                onChange={(e) => setQuizDuration(Number(e.target.value))}
                className="w-full pl-12 pr-4 py-4 bg-white/10 border border-white/20 rounded-xl text-white focus:outline-none focus:border-sui-blue appearance-none"
              >
                <option value={5} className="bg-gray-800 text-white">5 minutes</option>
                <option value={10} className="bg-gray-800 text-white">10 minutes</option>
                <option value={15} className="bg-gray-800 text-white">15 minutes</option>
                <option value={30} className="bg-gray-800 text-white">30 minutes</option>
                <option value={60} className="bg-gray-800 text-white">1 hour</option>
                <option value={120} className="bg-gray-800 text-white">2 hours</option>
                <option value={240} className="bg-gray-800 text-white">4 hours</option>
                <option value={480} className="bg-gray-800 text-white">8 hours</option>
                <option value={1440} className="bg-gray-800 text-white">24 hours</option>
              </select>
            </div>
            <p className="text-white/60 text-sm mt-2">
              Quiz will automatically end and distribute rewards to the winner after this time.
            </p>
          </div>
        </div>
      </div>

      {/* Questions */}
      <div className="quiz-card">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-2xl font-semibold text-white">Questions</h2>
          <button
            onClick={addQuestion}
            className="quiz-button-secondary flex items-center space-x-2"
          >
            <Plus className="w-4 h-4" />
            <span>Add Question</span>
          </button>
        </div>

        <div className="space-y-8">
          {questions.map((question, questionIndex) => (
            <div key={question.id} className="bg-white/5 rounded-xl p-6 border border-white/10">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium text-white">
                  Question {questionIndex + 1}
                </h3>
                {questions.length > 1 && (
                  <button
                    onClick={() => removeQuestion(question.id)}
                    className="text-quiz-red hover:text-red-400 transition-colors"
                  >
                    <Trash2 className="w-5 h-5" />
                  </button>
                )}
              </div>

              <div className="space-y-4">
                <div>
                  <label className="block text-white font-medium mb-2">Question Text</label>
                  <input
                    type="text"
                    value={question.text}
                    onChange={(e) => updateQuestion(question.id, 'text', e.target.value)}
                    placeholder="Enter your question..."
                    className="w-full p-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-white/50 focus:outline-none focus:border-sui-blue"
                  />
                </div>

                <div>
                  <label className="block text-white font-medium mb-2">Answer Options</label>
                  <div className="space-y-2">
                    {question.options.map((option, optionIndex) => (
                      <div key={optionIndex} className="flex items-center space-x-3">
                        <input
                          type="radio"
                          name={`correct-${question.id}`}
                          checked={question.correctAnswer === optionIndex}
                          onChange={() => updateQuestion(question.id, 'correctAnswer', optionIndex)}
                          className="w-4 h-4 text-sui-blue"
                        />
                        <input
                          type="text"
                          value={option}
                          onChange={(e) => updateOption(question.id, optionIndex, e.target.value)}
                          placeholder={`Option ${String.fromCharCode(65 + optionIndex)}`}
                          className="flex-1 p-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-white/50 focus:outline-none focus:border-sui-blue"
                        />
                      </div>
                    ))}
                  </div>
                </div>

                <div>
                  <label className="block text-white font-medium mb-2">Time Limit (seconds)</label>
                  <div className="relative">
                    <Clock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-white/50" />
                    <input
                      type="number"
                      value={question.timeLimit}
                      onChange={(e) => updateQuestion(question.id, 'timeLimit', Number(e.target.value))}
                      min="10"
                      max="300"
                      className="w-full pl-10 pr-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white focus:outline-none focus:border-sui-blue"
                    />
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Seal Protocol Features */}
      <SealQuizFeatures
        onTimeLock={setTimeLockDuration}
        onPrivacyMode={setPrivacyEnabled}
        onMultiSig={setMultiSigEnabled}
        onWhitelist={setWhitelistAddresses}
      />

      {/* Submit Button */}
      <div className="flex justify-center">
        <button
          onClick={handleSubmit}
          className="quiz-button text-lg px-12 py-4 flex items-center space-x-2"
        >
          <Save className="w-5 h-5" />
          <span>Create Quiz with Seal Protection</span>
        </button>
      </div>
    </div>
  )
}


"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var bls12381_exports = {};
__export(bls12381_exports, {
  G1Element: () => G1Element,
  G2Element: () => G2Element,
  GTElement: () => GTElement,
  Scalar: () => Scalar
});
module.exports = __toCommonJS(bls12381_exports);
var import_bls12_381 = require("@noble/curves/bls12-381");
var import_utils = require("@noble/curves/utils");
const _G1Element = class _G1Element {
  constructor(point) {
    this.point = point;
  }
  static generator() {
    return new _G1Element(import_bls12_381.bls12_381.G1.Point.BASE);
  }
  static fromBytes(bytes) {
    try {
      return new _G1Element(import_bls12_381.bls12_381.G1.Point.fromBytes(bytes));
    } catch {
      throw new Error("Invalid G1 point");
    }
  }
  toBytes() {
    return this.point.toBytes();
  }
  multiply(scalar) {
    return new _G1Element(this.point.multiply(scalar.scalar));
  }
  add(other) {
    return new _G1Element(this.point.add(other.point));
  }
  subtract(other) {
    return new _G1Element(this.point.subtract(other.point));
  }
  static hashToCurve(data) {
    return new _G1Element(import_bls12_381.bls12_381.G1.Point.fromAffine(import_bls12_381.bls12_381.G1.hashToCurve(data).toAffine()));
  }
  pairing(other) {
    return new GTElement(import_bls12_381.bls12_381.pairing(this.point, other.point));
  }
};
_G1Element.SIZE = 48;
let G1Element = _G1Element;
const _G2Element = class _G2Element {
  constructor(point) {
    this.point = point;
  }
  static generator() {
    return new _G2Element(import_bls12_381.bls12_381.G2.Point.BASE);
  }
  static fromBytes(bytes) {
    try {
      return new _G2Element(import_bls12_381.bls12_381.G2.Point.fromBytes(bytes));
    } catch {
      throw new Error("Invalid G2 point");
    }
  }
  toBytes() {
    return this.point.toBytes();
  }
  multiply(scalar) {
    return new _G2Element(this.point.multiply(scalar.scalar));
  }
  add(other) {
    return new _G2Element(this.point.add(other.point));
  }
  static hashToCurve(data) {
    return new _G2Element(import_bls12_381.bls12_381.G2.Point.fromAffine(import_bls12_381.bls12_381.G2.hashToCurve(data).toAffine()));
  }
  equals(other) {
    return this.point.equals(other.point);
  }
};
_G2Element.SIZE = 96;
let G2Element = _G2Element;
const _GTElement = class _GTElement {
  constructor(element) {
    this.element = element;
  }
  toBytes() {
    const P = [0, 3, 1, 4, 2, 5];
    const PAIR_SIZE = _GTElement.SIZE / P.length;
    const bytes = import_bls12_381.bls12_381.fields.Fp12.toBytes(this.element);
    const result = new Uint8Array(_GTElement.SIZE);
    for (let i = 0; i < P.length; i++) {
      const sourceStart = P[i] * PAIR_SIZE;
      const sourceEnd = sourceStart + PAIR_SIZE;
      const targetStart = i * PAIR_SIZE;
      result.set(bytes.subarray(sourceStart, sourceEnd), targetStart);
    }
    return result;
  }
  equals(other) {
    return import_bls12_381.bls12_381.fields.Fp12.eql(this.element, other.element);
  }
};
_GTElement.SIZE = 576;
let GTElement = _GTElement;
const _Scalar = class _Scalar {
  constructor(scalar) {
    this.scalar = scalar;
  }
  static fromBigint(scalar) {
    if (scalar < 0n || scalar >= import_bls12_381.bls12_381.fields.Fr.ORDER) {
      throw new Error("Scalar out of range");
    }
    return new _Scalar(scalar);
  }
  static random() {
    const randomSecretKey = import_bls12_381.bls12_381.utils.randomSecretKey();
    if (import_bls12_381.bls12_381_Fr.isLE) {
      return _Scalar.fromBytesLE(randomSecretKey);
    }
    return _Scalar.fromBytes(randomSecretKey);
  }
  toBytes() {
    return (0, import_utils.numberToBytesBE)(this.scalar, _Scalar.SIZE);
  }
  static fromBytes(bytes) {
    if (bytes.length !== _Scalar.SIZE) {
      throw new Error("Invalid scalar length");
    }
    return this.fromBigint((0, import_utils.bytesToNumberBE)(bytes));
  }
  static fromBytesLE(bytes) {
    if (bytes.length !== _Scalar.SIZE) {
      throw new Error("Invalid scalar length");
    }
    return this.fromBigint((0, import_utils.bytesToNumberLE)(bytes));
  }
};
_Scalar.SIZE = 32;
let Scalar = _Scalar;
//# sourceMappingURL=bls12381.js.map

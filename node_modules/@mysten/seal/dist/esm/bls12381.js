import { bls12_381, bls12_381_Fr } from "@noble/curves/bls12-381";
import { bytesToNumberBE, bytesToNumberLE, numberToBytesBE } from "@noble/curves/utils";
const _G1Element = class _G1Element {
  constructor(point) {
    this.point = point;
  }
  static generator() {
    return new _G1Element(bls12_381.G1.Point.BASE);
  }
  static fromBytes(bytes) {
    try {
      return new _G1Element(bls12_381.G1.Point.fromBytes(bytes));
    } catch {
      throw new Error("Invalid G1 point");
    }
  }
  toBytes() {
    return this.point.toBytes();
  }
  multiply(scalar) {
    return new _G1Element(this.point.multiply(scalar.scalar));
  }
  add(other) {
    return new _G1Element(this.point.add(other.point));
  }
  subtract(other) {
    return new _G1Element(this.point.subtract(other.point));
  }
  static hashToCurve(data) {
    return new _G1Element(bls12_381.G1.Point.fromAffine(bls12_381.G1.hashToCurve(data).toAffine()));
  }
  pairing(other) {
    return new GTElement(bls12_381.pairing(this.point, other.point));
  }
};
_G1Element.SIZE = 48;
let G1Element = _G1Element;
const _G2Element = class _G2Element {
  constructor(point) {
    this.point = point;
  }
  static generator() {
    return new _G2Element(bls12_381.G2.Point.BASE);
  }
  static fromBytes(bytes) {
    try {
      return new _G2Element(bls12_381.G2.Point.fromBytes(bytes));
    } catch {
      throw new Error("Invalid G2 point");
    }
  }
  toBytes() {
    return this.point.toBytes();
  }
  multiply(scalar) {
    return new _G2Element(this.point.multiply(scalar.scalar));
  }
  add(other) {
    return new _G2Element(this.point.add(other.point));
  }
  static hashToCurve(data) {
    return new _G2Element(bls12_381.G2.Point.fromAffine(bls12_381.G2.hashToCurve(data).toAffine()));
  }
  equals(other) {
    return this.point.equals(other.point);
  }
};
_G2Element.SIZE = 96;
let G2Element = _G2Element;
const _GTElement = class _GTElement {
  constructor(element) {
    this.element = element;
  }
  toBytes() {
    const P = [0, 3, 1, 4, 2, 5];
    const PAIR_SIZE = _GTElement.SIZE / P.length;
    const bytes = bls12_381.fields.Fp12.toBytes(this.element);
    const result = new Uint8Array(_GTElement.SIZE);
    for (let i = 0; i < P.length; i++) {
      const sourceStart = P[i] * PAIR_SIZE;
      const sourceEnd = sourceStart + PAIR_SIZE;
      const targetStart = i * PAIR_SIZE;
      result.set(bytes.subarray(sourceStart, sourceEnd), targetStart);
    }
    return result;
  }
  equals(other) {
    return bls12_381.fields.Fp12.eql(this.element, other.element);
  }
};
_GTElement.SIZE = 576;
let GTElement = _GTElement;
const _Scalar = class _Scalar {
  constructor(scalar) {
    this.scalar = scalar;
  }
  static fromBigint(scalar) {
    if (scalar < 0n || scalar >= bls12_381.fields.Fr.ORDER) {
      throw new Error("Scalar out of range");
    }
    return new _Scalar(scalar);
  }
  static random() {
    const randomSecretKey = bls12_381.utils.randomSecretKey();
    if (bls12_381_Fr.isLE) {
      return _Scalar.fromBytesLE(randomSecretKey);
    }
    return _Scalar.fromBytes(randomSecretKey);
  }
  toBytes() {
    return numberToBytesBE(this.scalar, _Scalar.SIZE);
  }
  static fromBytes(bytes) {
    if (bytes.length !== _Scalar.SIZE) {
      throw new Error("Invalid scalar length");
    }
    return this.fromBigint(bytesToNumberBE(bytes));
  }
  static fromBytesLE(bytes) {
    if (bytes.length !== _Scalar.SIZE) {
      throw new Error("Invalid scalar length");
    }
    return this.fromBigint(bytesToNumberLE(bytes));
  }
};
_Scalar.SIZE = 32;
let Scalar = _Scalar;
export {
  G1Element,
  G2Element,
  GTElement,
  Scalar
};
//# sourceMappingURL=bls12381.js.map

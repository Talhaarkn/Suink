import type { Fp2, Fp12 } from '@noble/curves/abstract/tower';
import type { WeierstrassPoint } from '@noble/curves/abstract/weierstrass';
export declare class G1Element {
    point: WeierstrassPoint<bigint>;
    static readonly SIZE = 48;
    constructor(point: WeierstrassPoint<bigint>);
    static generator(): G1Element;
    static fromBytes(bytes: Uint8Array): G1Element;
    toBytes(): Uint8Array<ArrayBuffer>;
    multiply(scalar: Scalar): G1Element;
    add(other: G1Element): G1Element;
    subtract(other: G1Element): G1Element;
    static hashToCurve(data: Uint8Array): G1Element;
    pairing(other: G2Element): GTElement;
}
export declare class G2Element {
    point: WeierstrassPoint<Fp2>;
    static readonly SIZE = 96;
    constructor(point: WeierstrassPoint<Fp2>);
    static generator(): G2Element;
    static fromBytes(bytes: Uint8Array): G2Element;
    toBytes(): Uint8Array<ArrayBuffer>;
    multiply(scalar: Scalar): G2Element;
    add(other: G2Element): G2Element;
    static hashToCurve(data: Uint8Array): G2Element;
    equals(other: G2Element): boolean;
}
export declare class GTElement {
    element: Fp12;
    static readonly SIZE = 576;
    constructor(element: Fp12);
    toBytes(): Uint8Array<ArrayBuffer>;
    equals(other: GTElement): boolean;
}
export declare class Scalar {
    scalar: bigint;
    static readonly SIZE = 32;
    constructor(scalar: bigint);
    static fromBigint(scalar: bigint): Scalar;
    static random(): Scalar;
    toBytes(): Uint8Array;
    static fromBytes(bytes: Uint8Array): Scalar;
    static fromBytesLE(bytes: Uint8Array): Scalar;
}
